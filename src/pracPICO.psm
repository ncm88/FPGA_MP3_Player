CONSTANT OUTPUT_PORT, 80               ;8 simple LEDs. Is an OUTPUT port.
CONSTANT DATA_IN_PORT, 00	        ;input data port. this is an INPUT port.
CONSTANT SSEG_PORT0, 40
CONSTANT SSEG_PORT1, 20
CONSTANT SSEG_PORT2, 10


CONSTANT DATA_OUT, 04
CONSTANT delay_1us_constant, 0B


NAMEREG s0, input_reg
NAMEREG s1, heartbeat_reg
NAMEREG s2, sum_reg
NAMEREG s3, carry_reg
NAMEREG s4, counter_reg
NAMEREG s5, msb_reg
NAMEREG s6, output_reg
NAMEREG sA, one_second_reg


;////////////////////////////////////////// INITIALIZATION BLOCK ///////////////////////////////////////////////////////////////
cold_start:     LOAD heartbeat_reg, 00                         ;clear 1 second counter and clear LEDs
                LOAD sum_reg, 00
                LOAD carry_reg, 00
                LOAD counter_reg, 00
                LOAD msb_reg, 00
                LOAD output_reg, 00

                OUTPUT output_reg, OUTPUT_PORT
                ENABLE INTERRUPT


;////////////////////////////////////////////////// MAIN LOOP /////////////////////////////////////////////////////////////////////


main_program:   CALL delay_1s
                TEST heartbeat_reg, 01
                JUMP NZ, clear_heartbeat
                CALL set_heartbeat
                JUMP main_program



;/////////////////////////////////////////// CONTROL BLOCK ///////////////////////////////////////////////////////////////////////


clear_heartbeat:    LOAD heartbeat_reg, 00
                    JUMP main_program



set_heartbeat:      LOAD heartbeat_reg, 01
                    RETURN


set_output:   LOAD msb_reg, carry_reg
              AND msb_reg, 80           ;hex 0x80
              JUMP NZ, case_msb_eight

              LOAD msb_reg, carry_reg
              AND msb_reg, 40
              JUMP NZ, case_msb_seven

              LOAD msb_reg, carry_reg
              AND msb_reg, 20
              JUMP NZ, case_msb_six

              LOAD msb_reg, carry_reg
              AND msb_reg, 10
              JUMP NZ, case_msb_five

              LOAD msb_reg, carry_reg
              AND msb_reg, 08
              JUMP NZ, case_msb_four

              LOAD msb_reg, carry_reg
              AND msb_reg, 04
              JUMP NZ, case_msb_three

              LOAD msb_reg, carry_reg
              AND msb_reg, 02
              JUMP NZ, case_msb_two

              LOAD msb_reg, carry_reg
              AND msb_reg, 01
              JUMP NZ, case_msb_one

              JUMP case_msb_zero


case_msb_eight:   LOAD output_reg, 08
                  JUMP msb_done

case_msb_seven:   LOAD output_reg, 07
                  JUMP msb_done

case_msb_six:   LOAD output_reg, 06
                  JUMP msb_done

case_msb_five:   LOAD output_reg, 05
                  JUMP msb_done
            
case_msb_four:   LOAD output_reg, 04
                  JUMP msb_done

case_msb_three:   LOAD output_reg, 03
                  JUMP msb_done

case_msb_two:   LOAD output_reg, 02
                  JUMP msb_done

case_msb_one:   LOAD output_reg, 01
                  JUMP msb_done

case_msb_zero:   LOAD output_reg, 00
                  JUMP msb_done

                    
;/////////////////////////////////////////     DELAY BLOCK       //////////////////////////////////////////////////////////////

delay_1us: LOAD sE, delay_1us_constant
          wait_1us: SUB sE, 01
                    JUMP NZ, wait_1us
                    RETURN


delay_40us: LOAD sD, 28                         ;40 x 1us = 40us
         wait_40us: CALL delay_1us
                    SUB sD, 01
                    JUMP NZ, wait_40us
                    RETURN


delay_1ms: LOAD sC, 19                         ;25 x 40us = 1ms
          wait_1ms: CALL delay_40us
                    SUB sC, 01
                    JUMP NZ, wait_1ms
                    RETURN


delay_20ms: LOAD sB, 14                         ;20 x 1ms = 20ms
          wait_20ms: CALL delay_1ms
                    SUB sB, 01
                    JUMP NZ, wait_20ms
                    RETURN
					

delay_1s: LOAD one_second_reg, 32                         ;50 x 20ms = 1000ms
           wait_1s: CALL delay_20ms
                    SUB one_second_reg, 01
                    JUMP NZ, wait_1s
                    RETURN


;////////////////////////////////////////////////////            ISR BLOCK              ////////////////////////////////////////////////////////////////

ISR:  INPUT input_reg, DATA_IN_PORT
      ADD sum_reg, input_reg
      ADDCY carry_reg, 00 ;add carry flag to carry tracker
      ADD counter_reg, 01
      JUMP Z, set_output

isr_finish: RETURNI ENABLE

msb_done:   SL0 output_reg
            ADD output_reg, heartbeat_reg
            LOAD sum_reg, 00
            LOAD carry_reg, 00
            OUTPUT output_reg, OUTPUT_PORT
            JUMP isr_finish
            


ADDRESS 3FF ;Interrupt vector
JUMP ISR    